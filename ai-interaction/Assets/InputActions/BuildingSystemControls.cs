//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Actions/BuildingSystemControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BuildingSystemControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BuildingSystemControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BuildingSystemControls"",
    ""maps"": [
        {
            ""name"": ""BuildingSystem"",
            ""id"": ""90cd0e9d-6e77-440f-8e24-9e1a20d16a26"",
            ""actions"": [
                {
                    ""name"": ""CreateObject"",
                    ""type"": ""Button"",
                    ""id"": ""08dd9197-720a-48ff-a3f6-65d91e78ee68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Button"",
                    ""id"": ""42e9032d-9565-4cc3-9ab4-c5061fdc001d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateObject"",
                    ""type"": ""Button"",
                    ""id"": ""418447a0-7f12-4914-87b0-a7772cfca441"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DeleteObject"",
                    ""type"": ""Button"",
                    ""id"": ""155a7ac9-3464-4675-97cd-30a656490b3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d044547-1dd3-45bc-b5ee-05bcf058ee8f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5810132-090e-4705-8968-ceaf26363428"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70bb5f61-5799-4474-af8b-12f3633822c8"",
                    ""path"": ""<Keyboard>/#(R)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""113b22a7-9fbb-4584-acad-d58d454aef84"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BuildingSystem
        m_BuildingSystem = asset.FindActionMap("BuildingSystem", throwIfNotFound: true);
        m_BuildingSystem_CreateObject = m_BuildingSystem.FindAction("CreateObject", throwIfNotFound: true);
        m_BuildingSystem_PlaceObject = m_BuildingSystem.FindAction("PlaceObject", throwIfNotFound: true);
        m_BuildingSystem_RotateObject = m_BuildingSystem.FindAction("RotateObject", throwIfNotFound: true);
        m_BuildingSystem_DeleteObject = m_BuildingSystem.FindAction("DeleteObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BuildingSystem
    private readonly InputActionMap m_BuildingSystem;
    private IBuildingSystemActions m_BuildingSystemActionsCallbackInterface;
    private readonly InputAction m_BuildingSystem_CreateObject;
    private readonly InputAction m_BuildingSystem_PlaceObject;
    private readonly InputAction m_BuildingSystem_RotateObject;
    private readonly InputAction m_BuildingSystem_DeleteObject;
    public struct BuildingSystemActions
    {
        private @BuildingSystemControls m_Wrapper;
        public BuildingSystemActions(@BuildingSystemControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CreateObject => m_Wrapper.m_BuildingSystem_CreateObject;
        public InputAction @PlaceObject => m_Wrapper.m_BuildingSystem_PlaceObject;
        public InputAction @RotateObject => m_Wrapper.m_BuildingSystem_RotateObject;
        public InputAction @DeleteObject => m_Wrapper.m_BuildingSystem_DeleteObject;
        public InputActionMap Get() { return m_Wrapper.m_BuildingSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingSystemActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingSystemActions instance)
        {
            if (m_Wrapper.m_BuildingSystemActionsCallbackInterface != null)
            {
                @CreateObject.started -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnCreateObject;
                @CreateObject.performed -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnCreateObject;
                @CreateObject.canceled -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnCreateObject;
                @PlaceObject.started -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.performed -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.canceled -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnPlaceObject;
                @RotateObject.started -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnRotateObject;
                @RotateObject.performed -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnRotateObject;
                @RotateObject.canceled -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnRotateObject;
                @DeleteObject.started -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnDeleteObject;
                @DeleteObject.performed -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnDeleteObject;
                @DeleteObject.canceled -= m_Wrapper.m_BuildingSystemActionsCallbackInterface.OnDeleteObject;
            }
            m_Wrapper.m_BuildingSystemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CreateObject.started += instance.OnCreateObject;
                @CreateObject.performed += instance.OnCreateObject;
                @CreateObject.canceled += instance.OnCreateObject;
                @PlaceObject.started += instance.OnPlaceObject;
                @PlaceObject.performed += instance.OnPlaceObject;
                @PlaceObject.canceled += instance.OnPlaceObject;
                @RotateObject.started += instance.OnRotateObject;
                @RotateObject.performed += instance.OnRotateObject;
                @RotateObject.canceled += instance.OnRotateObject;
                @DeleteObject.started += instance.OnDeleteObject;
                @DeleteObject.performed += instance.OnDeleteObject;
                @DeleteObject.canceled += instance.OnDeleteObject;
            }
        }
    }
    public BuildingSystemActions @BuildingSystem => new BuildingSystemActions(this);
    public interface IBuildingSystemActions
    {
        void OnCreateObject(InputAction.CallbackContext context);
        void OnPlaceObject(InputAction.CallbackContext context);
        void OnRotateObject(InputAction.CallbackContext context);
        void OnDeleteObject(InputAction.CallbackContext context);
    }
}
